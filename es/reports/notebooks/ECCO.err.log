Traceback (most recent call last):
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/jimenezm/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
%%time
theta_salt_ds = xr.open_mfdataset(
    Temp_2017, 
    engine='pydap',
    session=cache_session, 
    parallel=True, 
    combine='nested', 
    concat_dim='time',
)
------------------

----- stdout -----
CPU times: user 273 ms, sys: 143 ms, total: 417 ms
Wall time: 391 ms
------------------

[31m---------------------------------------------------------------------------[39m
[31mAssertionError[39m                            Traceback (most recent call last)
[36mFile [39m[32m~/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/IPython/core/async_helpers.py:128[39m, in [36m_pseudo_sync_runner[39m[34m(coro)[39m
[32m    120[39m [38;5;250m[39m[33;03m"""[39;00m
[32m    121[39m [33;03mA runner that does not really allow async execution, and just advance the coroutine.[39;00m
[32m    122[39m 
[32m   (...)[39m[32m    125[39m [33;03mCredit to Nathaniel Smith[39;00m
[32m    126[39m [33;03m"""[39;00m
[32m    127[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m128[39m     coro.send([38;5;28;01mNone[39;00m)
[32m    129[39m [38;5;28;01mexcept[39;00m [38;5;167;01mStopIteration[39;00m [38;5;28;01mas[39;00m exc:
[32m    130[39m     [38;5;28;01mreturn[39;00m exc.value

[36mFile [39m[32m~/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3413[39m, in [36mInteractiveShell.run_cell_async[39m[34m(self, raw_cell, store_history, silent, shell_futures, transformed_cell, preprocessing_exc_tuple, cell_id)[39m
[32m   3409[39m exec_count = [38;5;28mself[39m.execution_count
[32m   3410[39m [38;5;28;01mif[39;00m result.error_in_exec:
[32m   3411[39m     [38;5;66;03m# Store formatted traceback and error details[39;00m
[32m   3412[39m     [38;5;28mself[39m.history_manager.exceptions[exec_count] = (
[32m-> [39m[32m3413[39m         [38;5;28;43mself[39;49m[43m.[49m[43m_format_exception_for_storage[49m[43m([49m[43mresult[49m[43m.[49m[43merror_in_exec[49m[43m)[49m
[32m   3414[39m     )
[32m   3416[39m [38;5;66;03m# Each cell is a *single* input, regardless of how many lines it has[39;00m
[32m   3417[39m [38;5;28mself[39m.execution_count += [32m1[39m

[36mFile [39m[32m~/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/IPython/core/interactiveshell.py:3442[39m, in [36mInteractiveShell._format_exception_for_storage[39m[34m(self, exception, filename, running_compiled_code)[39m
[32m   3440[39m     [38;5;66;03m# Extract traceback if the error happened during compiled code execution[39;00m
[32m   3441[39m     elist = traceback.extract_tb(tb) [38;5;28;01mif[39;00m running_compiled_code [38;5;28;01melse[39;00m []
[32m-> [39m[32m3442[39m     stb = [38;5;28;43mself[39;49m[43m.[49m[43mSyntaxTB[49m[43m.[49m[43mstructured_traceback[49m[43m([49m[43metype[49m[43m,[49m[43m [49m[43mevalue[49m[43m,[49m[43m [49m[43melist[49m[43m)[49m
[32m   3444[39m [38;5;66;03m# Handle UsageError with a simple message[39;00m
[32m   3445[39m [38;5;28;01melif[39;00m etype [38;5;129;01mis[39;00m UsageError:

[36mFile [39m[32m~/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/IPython/core/ultratb.py:1243[39m, in [36mSyntaxTB.structured_traceback[39m[34m(self, etype, evalue, etb, tb_offset, context)[39m
[32m   1241[39m         value.text = newtext
[32m   1242[39m [38;5;28mself[39m.last_syntax_error = value
[32m-> [39m[32m1243[39m [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43mSyntaxTB[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[43m.[49m[43mstructured_traceback[49m[43m([49m
[32m   1244[39m [43m    [49m[43metype[49m[43m,[49m[43m [49m[43mvalue[49m[43m,[49m[43m [49m[43metb[49m[43m,[49m[43m [49m[43mtb_offset[49m[43m=[49m[43mtb_offset[49m[43m,[49m[43m [49m[43mcontext[49m[43m=[49m[43mcontext[49m
[32m   1245[39m [43m[49m[43m)[49m

[36mFile [39m[32m~/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/IPython/core/ultratb.py:212[39m, in [36mListTB.structured_traceback[39m[34m(self, etype, evalue, etb, tb_offset, context)[39m
[32m    210[39m     out_list.extend([38;5;28mself[39m._format_list(elist))
[32m    211[39m [38;5;66;03m# The exception info should be a single entry in the list.[39;00m
[32m--> [39m[32m212[39m lines = [33m"[39m[33m"[39m.join([38;5;28;43mself[39;49m[43m.[49m[43m_format_exception_only[49m[43m([49m[43metype[49m[43m,[49m[43m [49m[43mevalue[49m[43m)[49m)
[32m    213[39m out_list.append(lines)
[32m    215[39m [38;5;66;03m# Find chained exceptions if we have a traceback (not for exception-only mode)[39;00m

[36mFile [39m[32m~/miniforge3/envs/pydap_docs/lib/python3.11/site-packages/IPython/core/ultratb.py:341[39m, in [36mListTB._format_exception_only[39m[34m(self, etype, value)[39m
[32m    327[39m output_list.append(
[32m    328[39m     theme_table[[38;5;28mself[39m._theme_name].format(
[32m    329[39m         [(Token, [33m"[39m[33m  [39m[33m"[39m)]
[32m   (...)[39m[32m    336[39m     )
[32m    337[39m )
[32m    338[39m [38;5;28;01mif[39;00m textline == [33m"[39m[33m"[39m:
[32m    339[39m     [38;5;66;03m# sep 2025:[39;00m
[32m    340[39m     [38;5;66;03m# textline = py3compat.cast_unicode(value.text, "utf-8")[39;00m
[32m--> [39m[32m341[39m     [38;5;28;01massert[39;00m [38;5;28misinstance[39m(value.text, [38;5;28mstr[39m)
[32m    342[39m     textline = value.text
[32m    344[39m [38;5;28;01mif[39;00m textline [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

[31mAssertionError[39m: 

